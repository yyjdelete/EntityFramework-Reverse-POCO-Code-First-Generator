

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
// 
// Do not make changes directly to this file - edit the template instead.
// 
// The following connection settings were used to generate this file:
//     Configuration file:     "EntityFramework.Reverse.POCO.Generator\App.config"
//     Connection String Name: "MyDbContext"
//     Connection String:      "Data Source=(LocalDb)\ProjectsV13;Initial Catalog=northwind;Integrated Security=True;Application Name=EntityFramework Reverse POCO Generator"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using Microsoft.Data.Entity;
using Microsoft.Data.Entity.Metadata.Builders;
using System;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq.Expressions;

namespace EntityFramework_Reverse_POCO_Generator
{
    using System.Linq;

    // ************************************************************************
    // Unit of work
    public interface IMyDbContext : System.IDisposable
    {
        Microsoft.Data.Entity.DbSet<AlphabeticalListOfProduct> AlphabeticalListOfProducts { get; set; } // Alphabetical list of products
        Microsoft.Data.Entity.DbSet<Category> Categories { get; set; } // Categories
        Microsoft.Data.Entity.DbSet<CategorySalesFor1997> CategorySalesFor1997 { get; set; } // Category Sales for 1997
        Microsoft.Data.Entity.DbSet<CurrentProductList> CurrentProductLists { get; set; } // Current Product List
        Microsoft.Data.Entity.DbSet<Customer> Customers { get; set; } // Customers
        Microsoft.Data.Entity.DbSet<CustomerAndSuppliersByCity> CustomerAndSuppliersByCities { get; set; } // Customer and Suppliers by City
        Microsoft.Data.Entity.DbSet<CustomerCustomerDemo> CustomerCustomerDemoes { get; set; } // CustomerCustomerDemo
        Microsoft.Data.Entity.DbSet<CustomerDemographic> CustomerDemographics { get; set; } // CustomerDemographics
        Microsoft.Data.Entity.DbSet<Employee> Employees { get; set; } // Employees
        Microsoft.Data.Entity.DbSet<EmployeeTerritory> EmployeeTerritories { get; set; } // EmployeeTerritories
        Microsoft.Data.Entity.DbSet<Invoice> Invoices { get; set; } // Invoices
        Microsoft.Data.Entity.DbSet<Order> Orders { get; set; } // Orders
        Microsoft.Data.Entity.DbSet<OrderDetail> OrderDetails { get; set; } // Order Details
        Microsoft.Data.Entity.DbSet<OrderDetailsExtended> OrderDetailsExtendeds { get; set; } // Order Details Extended
        Microsoft.Data.Entity.DbSet<OrdersQry> OrdersQries { get; set; } // Orders Qry
        Microsoft.Data.Entity.DbSet<OrderSubtotal> OrderSubtotals { get; set; } // Order Subtotals
        Microsoft.Data.Entity.DbSet<Product> Products { get; set; } // Products
        Microsoft.Data.Entity.DbSet<ProductsAboveAveragePrice> ProductsAboveAveragePrices { get; set; } // Products Above Average Price
        Microsoft.Data.Entity.DbSet<ProductSalesFor1997> ProductSalesFor1997 { get; set; } // Product Sales for 1997
        Microsoft.Data.Entity.DbSet<ProductsByCategory> ProductsByCategories { get; set; } // Products by Category
        Microsoft.Data.Entity.DbSet<Region> Regions { get; set; } // Region
        Microsoft.Data.Entity.DbSet<SalesByCategory> SalesByCategories { get; set; } // Sales by Category
        Microsoft.Data.Entity.DbSet<SalesTotalsByAmount> SalesTotalsByAmounts { get; set; } // Sales Totals by Amount
        Microsoft.Data.Entity.DbSet<Shipper> Shippers { get; set; } // Shippers
        Microsoft.Data.Entity.DbSet<SummaryOfSalesByQuarter> SummaryOfSalesByQuarters { get; set; } // Summary of Sales by Quarter
        Microsoft.Data.Entity.DbSet<SummaryOfSalesByYear> SummaryOfSalesByYears { get; set; } // Summary of Sales by Year
        Microsoft.Data.Entity.DbSet<Supplier> Suppliers { get; set; } // Suppliers
        Microsoft.Data.Entity.DbSet<Territory> Territories { get; set; } // Territories

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        System.Threading.Tasks.Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        // Stored Procedures
        System.Collections.Generic.List<CustOrderHistReturnModel> CustOrderHist(string customerId);
        System.Collections.Generic.List<CustOrderHistReturnModel> CustOrderHist(string customerId, out int procResult);
        System.Collections.Generic.List<CustOrdersDetailReturnModel> CustOrdersDetail(int? orderId);
        System.Collections.Generic.List<CustOrdersDetailReturnModel> CustOrdersDetail(int? orderId, out int procResult);
        System.Collections.Generic.List<CustOrdersOrdersReturnModel> CustOrdersOrders(string customerId);
        System.Collections.Generic.List<CustOrdersOrdersReturnModel> CustOrdersOrders(string customerId, out int procResult);
        System.Collections.Generic.List<EmployeeSalesByCountryReturnModel> EmployeeSalesByCountry(System.DateTime? beginningDate, System.DateTime? endingDate);
        System.Collections.Generic.List<EmployeeSalesByCountryReturnModel> EmployeeSalesByCountry(System.DateTime? beginningDate, System.DateTime? endingDate, out int procResult);
        System.Collections.Generic.List<SalesByYearReturnModel> SalesByYear(System.DateTime? beginningDate, System.DateTime? endingDate);
        System.Collections.Generic.List<SalesByYearReturnModel> SalesByYear(System.DateTime? beginningDate, System.DateTime? endingDate, out int procResult);
        System.Collections.Generic.List<SalesByCategoryReturnModel> SalesByCategory(string categoryName, string ordYear);
        System.Collections.Generic.List<SalesByCategoryReturnModel> SalesByCategory(string categoryName, string ordYear, out int procResult);
        System.Collections.Generic.List<TenMostExpensiveProductsReturnModel> TenMostExpensiveProducts();
        System.Collections.Generic.List<TenMostExpensiveProductsReturnModel> TenMostExpensiveProducts(out int procResult);

        // Table Valued Functions
    }

    // ************************************************************************
    // Database context
    public class MyDbContext : Microsoft.Data.Entity.DbContext, IMyDbContext
    {
        public Microsoft.Data.Entity.DbSet<AlphabeticalListOfProduct> AlphabeticalListOfProducts { get; set; } // Alphabetical list of products
        public Microsoft.Data.Entity.DbSet<Category> Categories { get; set; } // Categories
        public Microsoft.Data.Entity.DbSet<CategorySalesFor1997> CategorySalesFor1997 { get; set; } // Category Sales for 1997
        public Microsoft.Data.Entity.DbSet<CurrentProductList> CurrentProductLists { get; set; } // Current Product List
        public Microsoft.Data.Entity.DbSet<Customer> Customers { get; set; } // Customers
        public Microsoft.Data.Entity.DbSet<CustomerAndSuppliersByCity> CustomerAndSuppliersByCities { get; set; } // Customer and Suppliers by City
        public Microsoft.Data.Entity.DbSet<CustomerCustomerDemo> CustomerCustomerDemoes { get; set; } // CustomerCustomerDemo
        public Microsoft.Data.Entity.DbSet<CustomerDemographic> CustomerDemographics { get; set; } // CustomerDemographics
        public Microsoft.Data.Entity.DbSet<Employee> Employees { get; set; } // Employees
        public Microsoft.Data.Entity.DbSet<EmployeeTerritory> EmployeeTerritories { get; set; } // EmployeeTerritories
        public Microsoft.Data.Entity.DbSet<Invoice> Invoices { get; set; } // Invoices
        public Microsoft.Data.Entity.DbSet<Order> Orders { get; set; } // Orders
        public Microsoft.Data.Entity.DbSet<OrderDetail> OrderDetails { get; set; } // Order Details
        public Microsoft.Data.Entity.DbSet<OrderDetailsExtended> OrderDetailsExtendeds { get; set; } // Order Details Extended
        public Microsoft.Data.Entity.DbSet<OrdersQry> OrdersQries { get; set; } // Orders Qry
        public Microsoft.Data.Entity.DbSet<OrderSubtotal> OrderSubtotals { get; set; } // Order Subtotals
        public Microsoft.Data.Entity.DbSet<Product> Products { get; set; } // Products
        public Microsoft.Data.Entity.DbSet<ProductsAboveAveragePrice> ProductsAboveAveragePrices { get; set; } // Products Above Average Price
        public Microsoft.Data.Entity.DbSet<ProductSalesFor1997> ProductSalesFor1997 { get; set; } // Product Sales for 1997
        public Microsoft.Data.Entity.DbSet<ProductsByCategory> ProductsByCategories { get; set; } // Products by Category
        public Microsoft.Data.Entity.DbSet<Region> Regions { get; set; } // Region
        public Microsoft.Data.Entity.DbSet<SalesByCategory> SalesByCategories { get; set; } // Sales by Category
        public Microsoft.Data.Entity.DbSet<SalesTotalsByAmount> SalesTotalsByAmounts { get; set; } // Sales Totals by Amount
        public Microsoft.Data.Entity.DbSet<Shipper> Shippers { get; set; } // Shippers
        public Microsoft.Data.Entity.DbSet<SummaryOfSalesByQuarter> SummaryOfSalesByQuarters { get; set; } // Summary of Sales by Quarter
        public Microsoft.Data.Entity.DbSet<SummaryOfSalesByYear> SummaryOfSalesByYears { get; set; } // Summary of Sales by Year
        public Microsoft.Data.Entity.DbSet<Supplier> Suppliers { get; set; } // Suppliers
        public Microsoft.Data.Entity.DbSet<Territory> Territories { get; set; } // Territories

#if false
        static MyDbContext()
        {
            Microsoft.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }
#endif

        public MyDbContext()
        {
        }

#if false
        public MyDbContext(string connectionString) : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, Microsoft.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }
#endif

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(Microsoft.Data.Entity.ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
#warning CodeFirstStoreFunctions is not support in EF7 at the time
#if false
            modelBuilder.Conventions.Add(new CodeFirstStoreFunctions.FunctionsConvention<MyDbContext>("dbo"));
#endif
            modelBuilder.Add(new AlphabeticalListOfProductConfiguration());
            modelBuilder.Add(new CategoryConfiguration());
            modelBuilder.Add(new CategorySalesFor1997Configuration());
            modelBuilder.Add(new CurrentProductListConfiguration());
            modelBuilder.Add(new CustomerConfiguration());
            modelBuilder.Add(new CustomerAndSuppliersByCityConfiguration());
            modelBuilder.Add(new CustomerCustomerDemoConfiguration());
            modelBuilder.Add(new CustomerDemographicConfiguration());
            modelBuilder.Add(new EmployeeConfiguration());
            modelBuilder.Add(new EmployeeTerritoryConfiguration());
            modelBuilder.Add(new InvoiceConfiguration());
            modelBuilder.Add(new OrderConfiguration());
            modelBuilder.Add(new OrderDetailConfiguration());
            modelBuilder.Add(new OrderDetailsExtendedConfiguration());
            modelBuilder.Add(new OrdersQryConfiguration());
            modelBuilder.Add(new OrderSubtotalConfiguration());
            modelBuilder.Add(new ProductConfiguration());
            modelBuilder.Add(new ProductsAboveAveragePriceConfiguration());
            modelBuilder.Add(new ProductSalesFor1997Configuration());
            modelBuilder.Add(new ProductsByCategoryConfiguration());
            modelBuilder.Add(new RegionConfiguration());
            modelBuilder.Add(new SalesByCategoryConfiguration());
            modelBuilder.Add(new SalesTotalsByAmountConfiguration());
            modelBuilder.Add(new ShipperConfiguration());
            modelBuilder.Add(new SummaryOfSalesByQuarterConfiguration());
            modelBuilder.Add(new SummaryOfSalesByYearConfiguration());
            modelBuilder.Add(new SupplierConfiguration());
            modelBuilder.Add(new TerritoryConfiguration());
        }

        public static Microsoft.Data.Entity.ModelBuilder CreateModel(Microsoft.Data.Entity.ModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Add(new AlphabeticalListOfProductConfiguration(), schema);
            modelBuilder.Add(new CategoryConfiguration(), schema);
            modelBuilder.Add(new CategorySalesFor1997Configuration(), schema);
            modelBuilder.Add(new CurrentProductListConfiguration(), schema);
            modelBuilder.Add(new CustomerConfiguration(), schema);
            modelBuilder.Add(new CustomerAndSuppliersByCityConfiguration(), schema);
            modelBuilder.Add(new CustomerCustomerDemoConfiguration(), schema);
            modelBuilder.Add(new CustomerDemographicConfiguration(), schema);
            modelBuilder.Add(new EmployeeConfiguration(), schema);
            modelBuilder.Add(new EmployeeTerritoryConfiguration(), schema);
            modelBuilder.Add(new InvoiceConfiguration(), schema);
            modelBuilder.Add(new OrderConfiguration(), schema);
            modelBuilder.Add(new OrderDetailConfiguration(), schema);
            modelBuilder.Add(new OrderDetailsExtendedConfiguration(), schema);
            modelBuilder.Add(new OrdersQryConfiguration(), schema);
            modelBuilder.Add(new OrderSubtotalConfiguration(), schema);
            modelBuilder.Add(new ProductConfiguration(), schema);
            modelBuilder.Add(new ProductsAboveAveragePriceConfiguration(), schema);
            modelBuilder.Add(new ProductSalesFor1997Configuration(), schema);
            modelBuilder.Add(new ProductsByCategoryConfiguration(), schema);
            modelBuilder.Add(new RegionConfiguration(), schema);
            modelBuilder.Add(new SalesByCategoryConfiguration(), schema);
            modelBuilder.Add(new SalesTotalsByAmountConfiguration(), schema);
            modelBuilder.Add(new ShipperConfiguration(), schema);
            modelBuilder.Add(new SummaryOfSalesByQuarterConfiguration(), schema);
            modelBuilder.Add(new SummaryOfSalesByYearConfiguration(), schema);
            modelBuilder.Add(new SupplierConfiguration(), schema);
            modelBuilder.Add(new TerritoryConfiguration(), schema);
            return modelBuilder;
        }
        
        // Stored Procedures
        public System.Collections.Generic.List<CustOrderHistReturnModel> CustOrderHist(string customerId)
        {
            int procResult;
            return CustOrderHist(customerId, out procResult);
        }

        public System.Collections.Generic.List<CustOrderHistReturnModel> CustOrderHist(string customerId, out int procResult)
        {
            var customerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CustomerID", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = customerId, Size = 5 };
            if (customerIdParam.Value == null)
                customerIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
#warning I know it doesn't work.
            //var procResultData = Database.SqlQuery<CustOrderHistReturnModel>("EXEC @procResult = [dbo].[CustOrderHist] @CustomerID", customerIdParam, procResultParam).ToList();
            var procResultData = this.Set<CustOrderHistReturnModel>().FromSql("EXEC @procResult = [dbo].[CustOrderHist] @CustomerID", customerIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<CustOrdersDetailReturnModel> CustOrdersDetail(int? orderId)
        {
            int procResult;
            return CustOrdersDetail(orderId, out procResult);
        }

        public System.Collections.Generic.List<CustOrdersDetailReturnModel> CustOrdersDetail(int? orderId, out int procResult)
        {
            var orderIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OrderID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = orderId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!orderId.HasValue)
                orderIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
#warning I know it doesn't work.
            //var procResultData = Database.SqlQuery<CustOrdersDetailReturnModel>("EXEC @procResult = [dbo].[CustOrdersDetail] @OrderID", orderIdParam, procResultParam).ToList();
            var procResultData = this.Set<CustOrdersDetailReturnModel>().FromSql("EXEC @procResult = [dbo].[CustOrdersDetail] @OrderID", orderIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<CustOrdersOrdersReturnModel> CustOrdersOrders(string customerId)
        {
            int procResult;
            return CustOrdersOrders(customerId, out procResult);
        }

        public System.Collections.Generic.List<CustOrdersOrdersReturnModel> CustOrdersOrders(string customerId, out int procResult)
        {
            var customerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CustomerID", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = customerId, Size = 5 };
            if (customerIdParam.Value == null)
                customerIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
#warning I know it doesn't work.
            //var procResultData = Database.SqlQuery<CustOrdersOrdersReturnModel>("EXEC @procResult = [dbo].[CustOrdersOrders] @CustomerID", customerIdParam, procResultParam).ToList();
            var procResultData = this.Set<CustOrdersOrdersReturnModel>().FromSql("EXEC @procResult = [dbo].[CustOrdersOrders] @CustomerID", customerIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<EmployeeSalesByCountryReturnModel> EmployeeSalesByCountry(System.DateTime? beginningDate, System.DateTime? endingDate)
        {
            int procResult;
            return EmployeeSalesByCountry(beginningDate, endingDate, out procResult);
        }

        public System.Collections.Generic.List<EmployeeSalesByCountryReturnModel> EmployeeSalesByCountry(System.DateTime? beginningDate, System.DateTime? endingDate, out int procResult)
        {
            var beginningDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Beginning_Date", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = beginningDate.GetValueOrDefault() };
            if (!beginningDate.HasValue)
                beginningDateParam.Value = System.DBNull.Value;

            var endingDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Ending_Date", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = endingDate.GetValueOrDefault() };
            if (!endingDate.HasValue)
                endingDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
#warning I know it doesn't work.
            //var procResultData = Database.SqlQuery<EmployeeSalesByCountryReturnModel>("EXEC @procResult = [dbo].[Employee Sales by Country] @Beginning_Date, @Ending_Date", beginningDateParam, endingDateParam, procResultParam).ToList();
            var procResultData = this.Set<EmployeeSalesByCountryReturnModel>().FromSql("EXEC @procResult = [dbo].[Employee Sales by Country] @Beginning_Date, @Ending_Date", beginningDateParam, endingDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<SalesByYearReturnModel> SalesByYear(System.DateTime? beginningDate, System.DateTime? endingDate)
        {
            int procResult;
            return SalesByYear(beginningDate, endingDate, out procResult);
        }

        public System.Collections.Generic.List<SalesByYearReturnModel> SalesByYear(System.DateTime? beginningDate, System.DateTime? endingDate, out int procResult)
        {
            var beginningDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Beginning_Date", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = beginningDate.GetValueOrDefault() };
            if (!beginningDate.HasValue)
                beginningDateParam.Value = System.DBNull.Value;

            var endingDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Ending_Date", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = endingDate.GetValueOrDefault() };
            if (!endingDate.HasValue)
                endingDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
#warning I know it doesn't work.
            //var procResultData = Database.SqlQuery<SalesByYearReturnModel>("EXEC @procResult = [dbo].[Sales by Year] @Beginning_Date, @Ending_Date", beginningDateParam, endingDateParam, procResultParam).ToList();
            var procResultData = this.Set<SalesByYearReturnModel>().FromSql("EXEC @procResult = [dbo].[Sales by Year] @Beginning_Date, @Ending_Date", beginningDateParam, endingDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<SalesByCategoryReturnModel> SalesByCategory(string categoryName, string ordYear)
        {
            int procResult;
            return SalesByCategory(categoryName, ordYear, out procResult);
        }

        public System.Collections.Generic.List<SalesByCategoryReturnModel> SalesByCategory(string categoryName, string ordYear, out int procResult)
        {
            var categoryNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CategoryName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = categoryName, Size = 15 };
            if (categoryNameParam.Value == null)
                categoryNameParam.Value = System.DBNull.Value;

            var ordYearParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OrdYear", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = ordYear, Size = 4 };
            if (ordYearParam.Value == null)
                ordYearParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
#warning I know it doesn't work.
            //var procResultData = Database.SqlQuery<SalesByCategoryReturnModel>("EXEC @procResult = [dbo].[SalesByCategory] @CategoryName, @OrdYear", categoryNameParam, ordYearParam, procResultParam).ToList();
            var procResultData = this.Set<SalesByCategoryReturnModel>().FromSql("EXEC @procResult = [dbo].[SalesByCategory] @CategoryName, @OrdYear", categoryNameParam, ordYearParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public System.Collections.Generic.List<TenMostExpensiveProductsReturnModel> TenMostExpensiveProducts()
        {
            int procResult;
            return TenMostExpensiveProducts(out procResult);
        }

        public System.Collections.Generic.List<TenMostExpensiveProductsReturnModel> TenMostExpensiveProducts(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
#warning I know it doesn't work.
            //var procResultData = Database.SqlQuery<TenMostExpensiveProductsReturnModel>("EXEC @procResult = [dbo].[Ten Most Expensive Products] ", procResultParam).ToList();
            var procResultData = this.Set<TenMostExpensiveProductsReturnModel>().FromSql("EXEC @procResult = [dbo].[Ten Most Expensive Products] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        // Table Valued Functions
    }

    // ************************************************************************
    // Fake Database context
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.18.1.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public Microsoft.Data.Entity.DbSet<AlphabeticalListOfProduct> AlphabeticalListOfProducts { get; set; }
        public Microsoft.Data.Entity.DbSet<Category> Categories { get; set; }
        public Microsoft.Data.Entity.DbSet<CategorySalesFor1997> CategorySalesFor1997 { get; set; }
        public Microsoft.Data.Entity.DbSet<CurrentProductList> CurrentProductLists { get; set; }
        public Microsoft.Data.Entity.DbSet<Customer> Customers { get; set; }
        public Microsoft.Data.Entity.DbSet<CustomerAndSuppliersByCity> CustomerAndSuppliersByCities { get; set; }
        public Microsoft.Data.Entity.DbSet<CustomerCustomerDemo> CustomerCustomerDemoes { get; set; }
        public Microsoft.Data.Entity.DbSet<CustomerDemographic> CustomerDemographics { get; set; }
        public Microsoft.Data.Entity.DbSet<Employee> Employees { get; set; }
        public Microsoft.Data.Entity.DbSet<EmployeeTerritory> EmployeeTerritories { get; set; }
        public Microsoft.Data.Entity.DbSet<Invoice> Invoices { get; set; }
        public Microsoft.Data.Entity.DbSet<Order> Orders { get; set; }
        public Microsoft.Data.Entity.DbSet<OrderDetail> OrderDetails { get; set; }
        public Microsoft.Data.Entity.DbSet<OrderDetailsExtended> OrderDetailsExtendeds { get; set; }
        public Microsoft.Data.Entity.DbSet<OrdersQry> OrdersQries { get; set; }
        public Microsoft.Data.Entity.DbSet<OrderSubtotal> OrderSubtotals { get; set; }
        public Microsoft.Data.Entity.DbSet<Product> Products { get; set; }
        public Microsoft.Data.Entity.DbSet<ProductsAboveAveragePrice> ProductsAboveAveragePrices { get; set; }
        public Microsoft.Data.Entity.DbSet<ProductSalesFor1997> ProductSalesFor1997 { get; set; }
        public Microsoft.Data.Entity.DbSet<ProductsByCategory> ProductsByCategories { get; set; }
        public Microsoft.Data.Entity.DbSet<Region> Regions { get; set; }
        public Microsoft.Data.Entity.DbSet<SalesByCategory> SalesByCategories { get; set; }
        public Microsoft.Data.Entity.DbSet<SalesTotalsByAmount> SalesTotalsByAmounts { get; set; }
        public Microsoft.Data.Entity.DbSet<Shipper> Shippers { get; set; }
        public Microsoft.Data.Entity.DbSet<SummaryOfSalesByQuarter> SummaryOfSalesByQuarters { get; set; }
        public Microsoft.Data.Entity.DbSet<SummaryOfSalesByYear> SummaryOfSalesByYears { get; set; }
        public Microsoft.Data.Entity.DbSet<Supplier> Suppliers { get; set; }
        public Microsoft.Data.Entity.DbSet<Territory> Territories { get; set; }

        public FakeMyDbContext()
        {
            AlphabeticalListOfProducts = new FakeDbSet<AlphabeticalListOfProduct>("ProductId", "ProductName", "Discontinued", "CategoryName");
            Categories = new FakeDbSet<Category>("CategoryId");
            CategorySalesFor1997 = new FakeDbSet<CategorySalesFor1997>("CategoryName");
            CurrentProductLists = new FakeDbSet<CurrentProductList>("ProductId", "ProductName");
            Customers = new FakeDbSet<Customer>("CustomerId");
            CustomerAndSuppliersByCities = new FakeDbSet<CustomerAndSuppliersByCity>("CompanyName", "Relationship");
            CustomerCustomerDemoes = new FakeDbSet<CustomerCustomerDemo>("CustomerId", "CustomerTypeId");
            CustomerDemographics = new FakeDbSet<CustomerDemographic>("CustomerTypeId");
            Employees = new FakeDbSet<Employee>("EmployeeId");
            EmployeeTerritories = new FakeDbSet<EmployeeTerritory>("EmployeeId", "TerritoryId");
            Invoices = new FakeDbSet<Invoice>("CustomerName", "Salesperson", "OrderId", "ShipperName", "ProductId", "ProductName", "UnitPrice", "Quantity", "Discount");
            Orders = new FakeDbSet<Order>("OrderId");
            OrderDetails = new FakeDbSet<OrderDetail>("OrderId", "ProductId");
            OrderDetailsExtendeds = new FakeDbSet<OrderDetailsExtended>("OrderId", "ProductId", "ProductName", "UnitPrice", "Quantity", "Discount");
            OrdersQries = new FakeDbSet<OrdersQry>("OrderId", "CompanyName");
            OrderSubtotals = new FakeDbSet<OrderSubtotal>("OrderId");
            Products = new FakeDbSet<Product>("ProductId");
            ProductsAboveAveragePrices = new FakeDbSet<ProductsAboveAveragePrice>("ProductName");
            ProductSalesFor1997 = new FakeDbSet<ProductSalesFor1997>("CategoryName", "ProductName");
            ProductsByCategories = new FakeDbSet<ProductsByCategory>("CategoryName", "ProductName", "Discontinued");
            Regions = new FakeDbSet<Region>("RegionId");
            SalesByCategories = new FakeDbSet<SalesByCategory>("CategoryId", "CategoryName", "ProductName");
            SalesTotalsByAmounts = new FakeDbSet<SalesTotalsByAmount>("OrderId", "CompanyName");
            Shippers = new FakeDbSet<Shipper>("ShipperId");
            SummaryOfSalesByQuarters = new FakeDbSet<SummaryOfSalesByQuarter>("OrderId");
            SummaryOfSalesByYears = new FakeDbSet<SummaryOfSalesByYear>("OrderId");
            Suppliers = new FakeDbSet<Supplier>("SupplierId");
            Territories = new FakeDbSet<Territory>("TerritoryId");
        }
        
        public int SaveChangesCount { get; private set; } 
        public int SaveChanges()
        {
            return SaveChanges(true);
        }
        public int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            return SaveChangesAsync(true, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }
        
        public void Dispose()
        {
            Dispose(true);
        }
        
        // Stored Procedures
        public System.Collections.Generic.List<CustOrderHistReturnModel> CustOrderHist(string customerId)
        {
            int procResult;
            return CustOrderHist(customerId, out procResult);
        }

        public System.Collections.Generic.List<CustOrderHistReturnModel> CustOrderHist(string customerId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<CustOrderHistReturnModel>();
        }

        public System.Collections.Generic.List<CustOrdersDetailReturnModel> CustOrdersDetail(int? orderId)
        {
            int procResult;
            return CustOrdersDetail(orderId, out procResult);
        }

        public System.Collections.Generic.List<CustOrdersDetailReturnModel> CustOrdersDetail(int? orderId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<CustOrdersDetailReturnModel>();
        }

        public System.Collections.Generic.List<CustOrdersOrdersReturnModel> CustOrdersOrders(string customerId)
        {
            int procResult;
            return CustOrdersOrders(customerId, out procResult);
        }

        public System.Collections.Generic.List<CustOrdersOrdersReturnModel> CustOrdersOrders(string customerId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<CustOrdersOrdersReturnModel>();
        }

        public System.Collections.Generic.List<EmployeeSalesByCountryReturnModel> EmployeeSalesByCountry(System.DateTime? beginningDate, System.DateTime? endingDate)
        {
            int procResult;
            return EmployeeSalesByCountry(beginningDate, endingDate, out procResult);
        }

        public System.Collections.Generic.List<EmployeeSalesByCountryReturnModel> EmployeeSalesByCountry(System.DateTime? beginningDate, System.DateTime? endingDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<EmployeeSalesByCountryReturnModel>();
        }

        public System.Collections.Generic.List<SalesByYearReturnModel> SalesByYear(System.DateTime? beginningDate, System.DateTime? endingDate)
        {
            int procResult;
            return SalesByYear(beginningDate, endingDate, out procResult);
        }

        public System.Collections.Generic.List<SalesByYearReturnModel> SalesByYear(System.DateTime? beginningDate, System.DateTime? endingDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SalesByYearReturnModel>();
        }

        public System.Collections.Generic.List<SalesByCategoryReturnModel> SalesByCategory(string categoryName, string ordYear)
        {
            int procResult;
            return SalesByCategory(categoryName, ordYear, out procResult);
        }

        public System.Collections.Generic.List<SalesByCategoryReturnModel> SalesByCategory(string categoryName, string ordYear, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SalesByCategoryReturnModel>();
        }

        public System.Collections.Generic.List<TenMostExpensiveProductsReturnModel> TenMostExpensiveProducts()
        {
            int procResult;
            return TenMostExpensiveProducts(out procResult);
        }

        public System.Collections.Generic.List<TenMostExpensiveProductsReturnModel> TenMostExpensiveProducts(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<TenMostExpensiveProductsReturnModel>();
        }

        // Table Valued Functions
    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.18.1.0")]
    public class FakeDbSet<TEntity> : Microsoft.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, Microsoft.Data.Entity.Query.Internal.IAsyncEnumerableAccessor<TEntity>, Microsoft.Data.Entity.Infrastructure.IInfrastructure<IServiceProvider> where TEntity : class 
    { 
#warning This won't works.
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;
 
        public FakeDbSet() 
        { 
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        System.Collections.Generic.IAsyncEnumerable<TEntity> Microsoft.Data.Entity.Query.Internal.IAsyncEnumerableAccessor<TEntity>.AsyncEnumerable
        {
            get
            {
                return new FakeDbAsyncEnumerable<TEntity>(_data);
            }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); } 
        } 

        IServiceProvider Microsoft.Data.Entity.Infrastructure.IInfrastructure<IServiceProvider>.Instance
        {
            get
            {
                throw new NotImplementedException();
            }
        }

        public override Microsoft.Data.Entity.ChangeTracking.EntityEntry<TEntity> Add(TEntity entity, GraphBehavior behavior = GraphBehavior.IncludeDependents)
        {
            if (entity == null) throw new System.ArgumentNullException("entity");
            _data.Add(entity);
            return base.Add(entity, behavior);
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            foreach (var entity in entities)
            {
                _data.Add(entity);
            }
        }

        public override void AddRange(System.Collections.Generic.IEnumerable<TEntity> entities, GraphBehavior behavior = GraphBehavior.IncludeDependents)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
        }

        public override Microsoft.Data.Entity.ChangeTracking.EntityEntry<TEntity> Attach(TEntity entity, GraphBehavior behavior = GraphBehavior.IncludeDependents)
        {
            return base.Attach(entity, behavior);
        }

        public override void AttachRange(System.Collections.Generic.IEnumerable<TEntity> entities, GraphBehavior behavior = GraphBehavior.IncludeDependents)
        {
            base.AttachRange(entities, behavior);
        }

        public override void AttachRange(params TEntity[] entities)
        {
            base.AttachRange(entities);
        }

        public override Microsoft.Data.Entity.ChangeTracking.EntityEntry<TEntity> Remove(TEntity entity)
        {
            if (entity == null) throw new System.ArgumentNullException("entity");
            _data.Remove(entity);
            return base.Remove(entity);
        }

        public override void RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            foreach (var entity in entities)
            {
                _data.Remove(entity);
            }
        }

        public override Microsoft.Data.Entity.ChangeTracking.EntityEntry<TEntity> Update(TEntity entity, GraphBehavior behavior = GraphBehavior.IncludeDependents)
        {
            return base.Update(entity, behavior);
        }
        public override void UpdateRange(System.Collections.Generic.IEnumerable<TEntity> entities, GraphBehavior behavior = GraphBehavior.IncludeDependents)
        {
            base.UpdateRange(entities, behavior);
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            base.UpdateRange(entities);
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }
    } 
 
    public class FakeDbAsyncQueryProvider<TEntity> : Microsoft.Data.Entity.Query.Internal.IAsyncQueryProvider 
    { 
        private readonly IQueryProvider _inner; 
 
        public FakeDbAsyncQueryProvider(IQueryProvider inner) 
        { 
            _inner = inner; 
        } 
 
        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TEntity>(expression); 
        } 
 
        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TElement>(expression); 
        } 
 
        public object Execute(System.Linq.Expressions.Expression expression) 
        { 
            return _inner.Execute(expression); 
        } 
 
        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression) 
        { 
            return _inner.Execute<TResult>(expression); 
        } 
 
        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression)); 
        }
 
        public System.Collections.Generic.IAsyncEnumerable<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TResult>(CreateQuery<TResult>(expression));
        }
    } 
 
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Collections.Generic.IAsyncEnumerable<T>, IQueryable<T> 
    { 
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable) 
            : base(enumerable) 
        { } 
 
        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression) 
            : base(expression) 
        { } 
 
        public System.Collections.Generic.IAsyncEnumerator<T> GetEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator()); 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<T>(this); } 
        } 
    } 
 
    public class FakeDbAsyncEnumerator<T> : System.Collections.Generic.IAsyncEnumerator<T> 
    { 
        private readonly System.Collections.Generic.IEnumerator<T> _inner; 
 
        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner) 
        { 
            _inner = inner; 
        } 
 
        public void Dispose() 
        { 
            _inner.Dispose(); 
        } 
 
        public System.Threading.Tasks.Task<bool> MoveNext(System.Threading.CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext()); 
        } 
 
        public T Current 
        { 
            get { return _inner.Current; } 
        } 
    }

    // ************************************************************************
    // POCO classes

    // Alphabetical list of products
    public class AlphabeticalListOfProduct
    {
        public int ProductId { get; set; } // ProductID
        public string ProductName { get; set; } // ProductName (length: 40)
        public int? SupplierId { get; set; } // SupplierID
        public int? CategoryId { get; set; } // CategoryID
        public string QuantityPerUnit { get; set; } // QuantityPerUnit (length: 20)
        public decimal? UnitPrice { get; set; } // UnitPrice
        public short? UnitsInStock { get; set; } // UnitsInStock
        public short? UnitsOnOrder { get; set; } // UnitsOnOrder
        public short? ReorderLevel { get; set; } // ReorderLevel
        public bool Discontinued { get; set; } // Discontinued
        public string CategoryName { get; set; } // CategoryName (length: 15)
    }

    // Categories
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.18.1.0")]
    public class Category
    {
        public int CategoryId { get; set; } // CategoryID (Primary key)
        public string CategoryName { get; set; } // CategoryName (length: 15)
        public string Description { get; set; } // Description (length: 1073741823)
        public byte[] Picture { get; set; } // Picture (length: 2147483647)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Product> Products { get; set; } // Products.FK_Products_Categories
        
        public Category()
        {
            Products = new System.Collections.Generic.List<Product>();
        }
    }

    // Category Sales for 1997
    public class CategorySalesFor1997
    {
        public string CategoryName { get; set; } // CategoryName (length: 15)
        public decimal? CategorySales { get; set; } // CategorySales
    }

    // Current Product List
    public class CurrentProductList
    {
        public int ProductId { get; set; } // ProductID
        public string ProductName { get; set; } // ProductName (length: 40)
    }

    // Customers
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.18.1.0")]
    public class Customer
    {
        public string CustomerId { get; set; } // CustomerID (Primary key) (length: 5)
        public string CompanyName { get; set; } // CompanyName (length: 40)
        public string ContactName { get; set; } // ContactName (length: 30)
        public string ContactTitle { get; set; } // ContactTitle (length: 30)
        public string Address { get; set; } // Address (length: 60)
        public string City { get; set; } // City (length: 15)
        public string Region { get; set; } // Region (length: 15)
        public string PostalCode { get; set; } // PostalCode (length: 10)
        public string Country { get; set; } // Country (length: 15)
        public string Phone { get; set; } // Phone (length: 24)
        public string Fax { get; set; } // Fax (length: 24)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<CustomerCustomerDemo> CustomerCustomerDemoes { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Order> Orders { get; set; } // Orders.FK_Orders_Customers
        
        public Customer()
        {
            CustomerCustomerDemoes = new System.Collections.Generic.List<CustomerCustomerDemo>();
            Orders = new System.Collections.Generic.List<Order>();
        }
    }

    // Customer and Suppliers by City
    public class CustomerAndSuppliersByCity
    {
        public string City { get; set; } // City (length: 15)
        public string CompanyName { get; set; } // CompanyName (length: 40)
        public string ContactName { get; set; } // ContactName (length: 30)
        public string Relationship { get; set; } // Relationship (length: 9)
    }

    // CustomerCustomerDemo
    public class CustomerCustomerDemo
    {
        public string CustomerId { get; set; } // CustomerID (Primary key) (length: 5)
        public string CustomerTypeId { get; set; } // CustomerTypeID (Primary key) (length: 10)

        // Foreign keys
        public virtual Customer Customer { get; set; } // FK_CustomerCustomerDemo_Customers
        public virtual CustomerDemographic CustomerDemographic { get; set; } // FK_CustomerCustomerDemo
    }

    // CustomerDemographics
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.18.1.0")]
    public class CustomerDemographic
    {
        public string CustomerTypeId { get; set; } // CustomerTypeID (Primary key) (length: 10)
        public string CustomerDesc { get; set; } // CustomerDesc (length: 1073741823)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<CustomerCustomerDemo> CustomerCustomerDemoes { get; set; } // Many to many mapping
        
        public CustomerDemographic()
        {
            CustomerCustomerDemoes = new System.Collections.Generic.List<CustomerCustomerDemo>();
        }
    }

    // Employees
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.18.1.0")]
    public class Employee
    {
        public int EmployeeId { get; set; } // EmployeeID (Primary key)
        public string LastName { get; set; } // LastName (length: 20)
        public string FirstName { get; set; } // FirstName (length: 10)
        public string Title { get; set; } // Title (length: 30)
        public string TitleOfCourtesy { get; set; } // TitleOfCourtesy (length: 25)
        public System.DateTime? BirthDate { get; set; } // BirthDate
        public System.DateTime? HireDate { get; set; } // HireDate
        public string Address { get; set; } // Address (length: 60)
        public string City { get; set; } // City (length: 15)
        public string Region { get; set; } // Region (length: 15)
        public string PostalCode { get; set; } // PostalCode (length: 10)
        public string Country { get; set; } // Country (length: 15)
        public string HomePhone { get; set; } // HomePhone (length: 24)
        public string Extension { get; set; } // Extension (length: 4)
        public byte[] Photo { get; set; } // Photo (length: 2147483647)
        public string Notes { get; set; } // Notes (length: 1073741823)
        public int? ReportsTo { get; set; } // ReportsTo
        public string PhotoPath { get; set; } // PhotoPath (length: 255)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Employee> Employees { get; set; } // Employees.FK_Employees_Employees
        public virtual System.Collections.Generic.ICollection<EmployeeTerritory> EmployeeTerritories { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Order> Orders { get; set; } // Orders.FK_Orders_Employees

        // Foreign keys
        public virtual Employee Employee_ReportsTo { get; set; } // FK_Employees_Employees
        
        public Employee()
        {
            Employees = new System.Collections.Generic.List<Employee>();
            EmployeeTerritories = new System.Collections.Generic.List<EmployeeTerritory>();
            Orders = new System.Collections.Generic.List<Order>();
        }
    }

    // EmployeeTerritories
    public class EmployeeTerritory
    {
        public int EmployeeId { get; set; } // EmployeeID (Primary key)
        public string TerritoryId { get; set; } // TerritoryID (Primary key) (length: 20)

        // Foreign keys
        public virtual Employee Employee { get; set; } // FK_EmployeeTerritories_Employees
        public virtual Territory Territory { get; set; } // FK_EmployeeTerritories_Territories
    }

    // Invoices
    public class Invoice
    {
        public string ShipName { get; set; } // ShipName (length: 40)
        public string ShipAddress { get; set; } // ShipAddress (length: 60)
        public string ShipCity { get; set; } // ShipCity (length: 15)
        public string ShipRegion { get; set; } // ShipRegion (length: 15)
        public string ShipPostalCode { get; set; } // ShipPostalCode (length: 10)
        public string ShipCountry { get; set; } // ShipCountry (length: 15)
        public string CustomerId { get; set; } // CustomerID (length: 5)
        public string CustomerName { get; set; } // CustomerName (length: 40)
        public string Address { get; set; } // Address (length: 60)
        public string City { get; set; } // City (length: 15)
        public string Region { get; set; } // Region (length: 15)
        public string PostalCode { get; set; } // PostalCode (length: 10)
        public string Country { get; set; } // Country (length: 15)
        public string Salesperson { get; set; } // Salesperson (length: 31)
        public int OrderId { get; set; } // OrderID
        public System.DateTime? OrderDate { get; set; } // OrderDate
        public System.DateTime? RequiredDate { get; set; } // RequiredDate
        public System.DateTime? ShippedDate { get; set; } // ShippedDate
        public string ShipperName { get; set; } // ShipperName (length: 40)
        public int ProductId { get; set; } // ProductID
        public string ProductName { get; set; } // ProductName (length: 40)
        public decimal UnitPrice { get; set; } // UnitPrice
        public short Quantity { get; set; } // Quantity
        public float Discount { get; set; } // Discount
        public decimal? ExtendedPrice { get; set; } // ExtendedPrice
        public decimal? Freight { get; set; } // Freight
    }

    // Orders
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.18.1.0")]
    public class Order
    {
        public int OrderId { get; set; } // OrderID (Primary key)
        public string CustomerId { get; set; } // CustomerID (length: 5)
        public int? EmployeeId { get; set; } // EmployeeID
        public System.DateTime? OrderDate { get; set; } // OrderDate
        public System.DateTime? RequiredDate { get; set; } // RequiredDate
        public System.DateTime? ShippedDate { get; set; } // ShippedDate
        public int? ShipVia { get; set; } // ShipVia
        public decimal? Freight { get; set; } // Freight
        public string ShipName { get; set; } // ShipName (length: 40)
        public string ShipAddress { get; set; } // ShipAddress (length: 60)
        public string ShipCity { get; set; } // ShipCity (length: 15)
        public string ShipRegion { get; set; } // ShipRegion (length: 15)
        public string ShipPostalCode { get; set; } // ShipPostalCode (length: 10)
        public string ShipCountry { get; set; } // ShipCountry (length: 15)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<OrderDetail> OrderDetails { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Customer Customer { get; set; } // FK_Orders_Customers
        public virtual Employee Employee { get; set; } // FK_Orders_Employees
        public virtual Shipper Shipper { get; set; } // FK_Orders_Shippers
        
        public Order()
        {
            Freight = 0m;
            OrderDetails = new System.Collections.Generic.List<OrderDetail>();
        }
    }

    // Order Details
    public class OrderDetail
    {
        public int OrderId { get; set; } // OrderID (Primary key)
        public int ProductId { get; set; } // ProductID (Primary key)
        public decimal UnitPrice { get; set; } // UnitPrice
        public short Quantity { get; set; } // Quantity
        public float Discount { get; set; } // Discount

        // Foreign keys
        public virtual Order Order { get; set; } // FK_Order_Details_Orders
        public virtual Product Product { get; set; } // FK_Order_Details_Products
        
        public OrderDetail()
        {
            UnitPrice = 0m;
            Quantity = 1;
            Discount = 0;
        }
    }

    // Order Details Extended
    public class OrderDetailsExtended
    {
        public int OrderId { get; set; } // OrderID
        public int ProductId { get; set; } // ProductID
        public string ProductName { get; set; } // ProductName (length: 40)
        public decimal UnitPrice { get; set; } // UnitPrice
        public short Quantity { get; set; } // Quantity
        public float Discount { get; set; } // Discount
        public decimal? ExtendedPrice { get; set; } // ExtendedPrice
    }

    // Orders Qry
    public class OrdersQry
    {
        public int OrderId { get; set; } // OrderID
        public string CustomerId { get; set; } // CustomerID (length: 5)
        public int? EmployeeId { get; set; } // EmployeeID
        public System.DateTime? OrderDate { get; set; } // OrderDate
        public System.DateTime? RequiredDate { get; set; } // RequiredDate
        public System.DateTime? ShippedDate { get; set; } // ShippedDate
        public int? ShipVia { get; set; } // ShipVia
        public decimal? Freight { get; set; } // Freight
        public string ShipName { get; set; } // ShipName (length: 40)
        public string ShipAddress { get; set; } // ShipAddress (length: 60)
        public string ShipCity { get; set; } // ShipCity (length: 15)
        public string ShipRegion { get; set; } // ShipRegion (length: 15)
        public string ShipPostalCode { get; set; } // ShipPostalCode (length: 10)
        public string ShipCountry { get; set; } // ShipCountry (length: 15)
        public string CompanyName { get; set; } // CompanyName (length: 40)
        public string Address { get; set; } // Address (length: 60)
        public string City { get; set; } // City (length: 15)
        public string Region { get; set; } // Region (length: 15)
        public string PostalCode { get; set; } // PostalCode (length: 10)
        public string Country { get; set; } // Country (length: 15)
    }

    // Order Subtotals
    public class OrderSubtotal
    {
        public int OrderId { get; set; } // OrderID
        public decimal? Subtotal { get; set; } // Subtotal
    }

    // Products
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.18.1.0")]
    public class Product
    {
        public int ProductId { get; set; } // ProductID (Primary key)
        public string ProductName { get; set; } // ProductName (length: 40)
        public int? SupplierId { get; set; } // SupplierID
        public int? CategoryId { get; set; } // CategoryID
        public string QuantityPerUnit { get; set; } // QuantityPerUnit (length: 20)
        public decimal? UnitPrice { get; set; } // UnitPrice
        public short? UnitsInStock { get; set; } // UnitsInStock
        public short? UnitsOnOrder { get; set; } // UnitsOnOrder
        public short? ReorderLevel { get; set; } // ReorderLevel
        public bool Discontinued { get; set; } // Discontinued

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<OrderDetail> OrderDetails { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Category Category { get; set; } // FK_Products_Categories
        public virtual Supplier Supplier { get; set; } // FK_Products_Suppliers
        
        public Product()
        {
            UnitPrice = 0m;
            UnitsInStock = 0;
            UnitsOnOrder = 0;
            ReorderLevel = 0;
            Discontinued = false;
            OrderDetails = new System.Collections.Generic.List<OrderDetail>();
        }
    }

    // Products Above Average Price
    public class ProductsAboveAveragePrice
    {
        public string ProductName { get; set; } // ProductName (length: 40)
        public decimal? UnitPrice { get; set; } // UnitPrice
    }

    // Product Sales for 1997
    public class ProductSalesFor1997
    {
        public string CategoryName { get; set; } // CategoryName (length: 15)
        public string ProductName { get; set; } // ProductName (length: 40)
        public decimal? ProductSales { get; set; } // ProductSales
    }

    // Products by Category
    public class ProductsByCategory
    {
        public string CategoryName { get; set; } // CategoryName (length: 15)
        public string ProductName { get; set; } // ProductName (length: 40)
        public string QuantityPerUnit { get; set; } // QuantityPerUnit (length: 20)
        public short? UnitsInStock { get; set; } // UnitsInStock
        public bool Discontinued { get; set; } // Discontinued
    }

    // The table 'Quarterly Orders' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // Quarterly Orders
    public class QuarterlyOrder
    {
        public string CustomerId { get; set; } // CustomerID (length: 5)
        public string CompanyName { get; set; } // CompanyName (length: 40)
        public string City { get; set; } // City (length: 15)
        public string Country { get; set; } // Country (length: 15)
    }

    // Region
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.18.1.0")]
    public class Region
    {
        public int RegionId { get; set; } // RegionID (Primary key)
        public string RegionDescription { get; set; } // RegionDescription (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Territory> Territories { get; set; } // Territories.FK_Territories_Region
        
        public Region()
        {
            Territories = new System.Collections.Generic.List<Territory>();
        }
    }

    // Sales by Category
    public class SalesByCategory
    {
        public int CategoryId { get; set; } // CategoryID
        public string CategoryName { get; set; } // CategoryName (length: 15)
        public string ProductName { get; set; } // ProductName (length: 40)
        public decimal? ProductSales { get; set; } // ProductSales
    }

    // Sales Totals by Amount
    public class SalesTotalsByAmount
    {
        public decimal? SaleAmount { get; set; } // SaleAmount
        public int OrderId { get; set; } // OrderID
        public string CompanyName { get; set; } // CompanyName (length: 40)
        public System.DateTime? ShippedDate { get; set; } // ShippedDate
    }

    // Shippers
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.18.1.0")]
    public class Shipper
    {
        public int ShipperId { get; set; } // ShipperID (Primary key)
        public string CompanyName { get; set; } // CompanyName (length: 40)
        public string Phone { get; set; } // Phone (length: 24)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Order> Orders { get; set; } // Orders.FK_Orders_Shippers
        
        public Shipper()
        {
            Orders = new System.Collections.Generic.List<Order>();
        }
    }

    // Summary of Sales by Quarter
    public class SummaryOfSalesByQuarter
    {
        public System.DateTime? ShippedDate { get; set; } // ShippedDate
        public int OrderId { get; set; } // OrderID
        public decimal? Subtotal { get; set; } // Subtotal
    }

    // Summary of Sales by Year
    public class SummaryOfSalesByYear
    {
        public System.DateTime? ShippedDate { get; set; } // ShippedDate
        public int OrderId { get; set; } // OrderID
        public decimal? Subtotal { get; set; } // Subtotal
    }

    // Suppliers
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.18.1.0")]
    public class Supplier
    {
        public int SupplierId { get; set; } // SupplierID (Primary key)
        public string CompanyName { get; set; } // CompanyName (length: 40)
        public string ContactName { get; set; } // ContactName (length: 30)
        public string ContactTitle { get; set; } // ContactTitle (length: 30)
        public string Address { get; set; } // Address (length: 60)
        public string City { get; set; } // City (length: 15)
        public string Region { get; set; } // Region (length: 15)
        public string PostalCode { get; set; } // PostalCode (length: 10)
        public string Country { get; set; } // Country (length: 15)
        public string Phone { get; set; } // Phone (length: 24)
        public string Fax { get; set; } // Fax (length: 24)
        public string HomePage { get; set; } // HomePage (length: 1073741823)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Product> Products { get; set; } // Products.FK_Products_Suppliers
        
        public Supplier()
        {
            Products = new System.Collections.Generic.List<Product>();
        }
    }

    // Territories
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.18.1.0")]
    public class Territory
    {
        public string TerritoryId { get; set; } // TerritoryID (Primary key) (length: 20)
        public string TerritoryDescription { get; set; } // TerritoryDescription (length: 50)
        public int RegionId { get; set; } // RegionID

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<EmployeeTerritory> EmployeeTerritories { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Region Region { get; set; } // FK_Territories_Region
        
        public Territory()
        {
            EmployeeTerritories = new System.Collections.Generic.List<EmployeeTerritory>();
        }
    }


    // ************************************************************************
    // POCO Configuration

    // Alphabetical list of products
    public class AlphabeticalListOfProductConfiguration : EntityTypeConfiguration<AlphabeticalListOfProduct>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<AlphabeticalListOfProduct> builder, string schema)
        {
            builder.ToTable("Alphabetical list of products", schema);
            builder.HasKey(x => new { x.ProductId, x.ProductName, x.Discontinued, x.CategoryName });

            builder.Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int");
            builder.Property(x => x.ProductName).HasColumnName("ProductName").IsRequired().HasColumnType("nvarchar").HasMaxLength(40);
            builder.Property(x => x.SupplierId).HasColumnName("SupplierID").IsOptional().HasColumnType("int");
            builder.Property(x => x.CategoryId).HasColumnName("CategoryID").IsOptional().HasColumnType("int");
            builder.Property(x => x.QuantityPerUnit).HasColumnName("QuantityPerUnit").IsOptional().HasColumnType("nvarchar").HasMaxLength(20);
            builder.Property(x => x.UnitPrice).HasColumnName("UnitPrice").IsOptional().HasColumnType("money").HasPrecision(19,4);
            builder.Property(x => x.UnitsInStock).HasColumnName("UnitsInStock").IsOptional().HasColumnType("smallint");
            builder.Property(x => x.UnitsOnOrder).HasColumnName("UnitsOnOrder").IsOptional().HasColumnType("smallint");
            builder.Property(x => x.ReorderLevel).HasColumnName("ReorderLevel").IsOptional().HasColumnType("smallint");
            builder.Property(x => x.Discontinued).HasColumnName("Discontinued").IsRequired().HasColumnType("bit");
            builder.Property(x => x.CategoryName).HasColumnName("CategoryName").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
        }
    }

    // Categories
    public class CategoryConfiguration : EntityTypeConfiguration<Category>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<Category> builder, string schema)
        {
            builder.ToTable("Categories", schema);
            builder.HasKey(x => x.CategoryId);

            builder.Property(x => x.CategoryId).HasColumnName("CategoryID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            builder.Property(x => x.CategoryName).HasColumnName("CategoryName").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.Description).HasColumnName("Description").IsOptional().HasColumnType("ntext").IsMaxLength();
            builder.Property(x => x.Picture).HasColumnName("Picture").IsOptional().HasColumnType("image").HasMaxLength(2147483647);
        }
    }

    // Category Sales for 1997
    public class CategorySalesFor1997Configuration : EntityTypeConfiguration<CategorySalesFor1997>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<CategorySalesFor1997> builder, string schema)
        {
            builder.ToTable("Category Sales for 1997", schema);
            builder.HasKey(x => x.CategoryName);

            builder.Property(x => x.CategoryName).HasColumnName("CategoryName").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.CategorySales).HasColumnName("CategorySales").IsOptional().HasColumnType("money").HasPrecision(19,4);
        }
    }

    // Current Product List
    public class CurrentProductListConfiguration : EntityTypeConfiguration<CurrentProductList>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<CurrentProductList> builder, string schema)
        {
            builder.ToTable("Current Product List", schema);
            builder.HasKey(x => new { x.ProductId, x.ProductName });

            builder.Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            builder.Property(x => x.ProductName).HasColumnName("ProductName").IsRequired().HasColumnType("nvarchar").HasMaxLength(40);
        }
    }

    // Customers
    public class CustomerConfiguration : EntityTypeConfiguration<Customer>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<Customer> builder, string schema)
        {
            builder.ToTable("Customers", schema);
            builder.HasKey(x => x.CustomerId);

            builder.Property(x => x.CustomerId).HasColumnName("CustomerID").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(5).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            builder.Property(x => x.CompanyName).HasColumnName("CompanyName").IsRequired().HasColumnType("nvarchar").HasMaxLength(40);
            builder.Property(x => x.ContactName).HasColumnName("ContactName").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            builder.Property(x => x.ContactTitle).HasColumnName("ContactTitle").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            builder.Property(x => x.Address).HasColumnName("Address").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            builder.Property(x => x.City).HasColumnName("City").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.Region).HasColumnName("Region").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.PostalCode).HasColumnName("PostalCode").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            builder.Property(x => x.Country).HasColumnName("Country").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.Phone).HasColumnName("Phone").IsOptional().HasColumnType("nvarchar").HasMaxLength(24);
            builder.Property(x => x.Fax).HasColumnName("Fax").IsOptional().HasColumnType("nvarchar").HasMaxLength(24);
        }
    }

    // Customer and Suppliers by City
    public class CustomerAndSuppliersByCityConfiguration : EntityTypeConfiguration<CustomerAndSuppliersByCity>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<CustomerAndSuppliersByCity> builder, string schema)
        {
            builder.ToTable("Customer and Suppliers by City", schema);
            builder.HasKey(x => new { x.CompanyName, x.Relationship });

            builder.Property(x => x.City).HasColumnName("City").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.CompanyName).HasColumnName("CompanyName").IsRequired().HasColumnType("nvarchar").HasMaxLength(40);
            builder.Property(x => x.ContactName).HasColumnName("ContactName").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            builder.Property(x => x.Relationship).HasColumnName("Relationship").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(9);
        }
    }

    // CustomerCustomerDemo
    public class CustomerCustomerDemoConfiguration : EntityTypeConfiguration<CustomerCustomerDemo>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<CustomerCustomerDemo> builder, string schema)
        {
            builder.ToTable("CustomerCustomerDemo", schema);
            builder.HasKey(x => new { x.CustomerId, x.CustomerTypeId });

            builder.Property(x => x.CustomerId).HasColumnName("CustomerID").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(5).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            builder.Property(x => x.CustomerTypeId).HasColumnName("CustomerTypeID").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(10).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            builder.HasRequired(a => a.Customer).WithMany(b => b.CustomerCustomerDemoes).HasForeignKey(c => c.CustomerId); // FK_CustomerCustomerDemo_Customers
            builder.HasRequired(a => a.CustomerDemographic).WithMany(b => b.CustomerCustomerDemoes).HasForeignKey(c => c.CustomerTypeId); // FK_CustomerCustomerDemo
        }
    }

    // CustomerDemographics
    public class CustomerDemographicConfiguration : EntityTypeConfiguration<CustomerDemographic>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<CustomerDemographic> builder, string schema)
        {
            builder.ToTable("CustomerDemographics", schema);
            builder.HasKey(x => x.CustomerTypeId);

            builder.Property(x => x.CustomerTypeId).HasColumnName("CustomerTypeID").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(10).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            builder.Property(x => x.CustomerDesc).HasColumnName("CustomerDesc").IsOptional().HasColumnType("ntext").IsMaxLength();
        }
    }

    // Employees
    public class EmployeeConfiguration : EntityTypeConfiguration<Employee>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<Employee> builder, string schema)
        {
            builder.ToTable("Employees", schema);
            builder.HasKey(x => x.EmployeeId);

            builder.Property(x => x.EmployeeId).HasColumnName("EmployeeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            builder.Property(x => x.LastName).HasColumnName("LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(20);
            builder.Property(x => x.FirstName).HasColumnName("FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(10);
            builder.Property(x => x.Title).HasColumnName("Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            builder.Property(x => x.TitleOfCourtesy).HasColumnName("TitleOfCourtesy").IsOptional().HasColumnType("nvarchar").HasMaxLength(25);
            builder.Property(x => x.BirthDate).HasColumnName("BirthDate").IsOptional().HasColumnType("datetime");
            builder.Property(x => x.HireDate).HasColumnName("HireDate").IsOptional().HasColumnType("datetime");
            builder.Property(x => x.Address).HasColumnName("Address").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            builder.Property(x => x.City).HasColumnName("City").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.Region).HasColumnName("Region").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.PostalCode).HasColumnName("PostalCode").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            builder.Property(x => x.Country).HasColumnName("Country").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.HomePhone).HasColumnName("HomePhone").IsOptional().HasColumnType("nvarchar").HasMaxLength(24);
            builder.Property(x => x.Extension).HasColumnName("Extension").IsOptional().HasColumnType("nvarchar").HasMaxLength(4);
            builder.Property(x => x.Photo).HasColumnName("Photo").IsOptional().HasColumnType("image").HasMaxLength(2147483647);
            builder.Property(x => x.Notes).HasColumnName("Notes").IsOptional().HasColumnType("ntext").IsMaxLength();
            builder.Property(x => x.ReportsTo).HasColumnName("ReportsTo").IsOptional().HasColumnType("int");
            builder.Property(x => x.PhotoPath).HasColumnName("PhotoPath").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);

            // Foreign keys
            builder.HasOptional(a => a.Employee_ReportsTo).WithMany(b => b.Employees).HasForeignKey(c => c.ReportsTo); // FK_Employees_Employees
        }
    }

    // EmployeeTerritories
    public class EmployeeTerritoryConfiguration : EntityTypeConfiguration<EmployeeTerritory>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<EmployeeTerritory> builder, string schema)
        {
            builder.ToTable("EmployeeTerritories", schema);
            builder.HasKey(x => new { x.EmployeeId, x.TerritoryId });

            builder.Property(x => x.EmployeeId).HasColumnName("EmployeeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            builder.Property(x => x.TerritoryId).HasColumnName("TerritoryID").IsRequired().HasColumnType("nvarchar").HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);

            // Foreign keys
            builder.HasRequired(a => a.Employee).WithMany(b => b.EmployeeTerritories).HasForeignKey(c => c.EmployeeId); // FK_EmployeeTerritories_Employees
            builder.HasRequired(a => a.Territory).WithMany(b => b.EmployeeTerritories).HasForeignKey(c => c.TerritoryId); // FK_EmployeeTerritories_Territories
        }
    }

    // Invoices
    public class InvoiceConfiguration : EntityTypeConfiguration<Invoice>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<Invoice> builder, string schema)
        {
            builder.ToTable("Invoices", schema);
            builder.HasKey(x => new { x.CustomerName, x.Salesperson, x.OrderId, x.ShipperName, x.ProductId, x.ProductName, x.UnitPrice, x.Quantity, x.Discount });

            builder.Property(x => x.ShipName).HasColumnName("ShipName").IsOptional().HasColumnType("nvarchar").HasMaxLength(40);
            builder.Property(x => x.ShipAddress).HasColumnName("ShipAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            builder.Property(x => x.ShipCity).HasColumnName("ShipCity").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.ShipRegion).HasColumnName("ShipRegion").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.ShipPostalCode).HasColumnName("ShipPostalCode").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            builder.Property(x => x.ShipCountry).HasColumnName("ShipCountry").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.CustomerId).HasColumnName("CustomerID").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(5);
            builder.Property(x => x.CustomerName).HasColumnName("CustomerName").IsRequired().HasColumnType("nvarchar").HasMaxLength(40);
            builder.Property(x => x.Address).HasColumnName("Address").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            builder.Property(x => x.City).HasColumnName("City").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.Region).HasColumnName("Region").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.PostalCode).HasColumnName("PostalCode").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            builder.Property(x => x.Country).HasColumnName("Country").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.Salesperson).HasColumnName("Salesperson").IsRequired().HasColumnType("nvarchar").HasMaxLength(31);
            builder.Property(x => x.OrderId).HasColumnName("OrderID").IsRequired().HasColumnType("int");
            builder.Property(x => x.OrderDate).HasColumnName("OrderDate").IsOptional().HasColumnType("datetime");
            builder.Property(x => x.RequiredDate).HasColumnName("RequiredDate").IsOptional().HasColumnType("datetime");
            builder.Property(x => x.ShippedDate).HasColumnName("ShippedDate").IsOptional().HasColumnType("datetime");
            builder.Property(x => x.ShipperName).HasColumnName("ShipperName").IsRequired().HasColumnType("nvarchar").HasMaxLength(40);
            builder.Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int");
            builder.Property(x => x.ProductName).HasColumnName("ProductName").IsRequired().HasColumnType("nvarchar").HasMaxLength(40);
            builder.Property(x => x.UnitPrice).HasColumnName("UnitPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            builder.Property(x => x.Quantity).HasColumnName("Quantity").IsRequired().HasColumnType("smallint");
            builder.Property(x => x.Discount).HasColumnName("Discount").IsRequired().HasColumnType("real");
            builder.Property(x => x.ExtendedPrice).HasColumnName("ExtendedPrice").IsOptional().HasColumnType("money").HasPrecision(19,4);
            builder.Property(x => x.Freight).HasColumnName("Freight").IsOptional().HasColumnType("money").HasPrecision(19,4);
        }
    }

    // Orders
    public class OrderConfiguration : EntityTypeConfiguration<Order>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<Order> builder, string schema)
        {
            builder.ToTable("Orders", schema);
            builder.HasKey(x => x.OrderId);

            builder.Property(x => x.OrderId).HasColumnName("OrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            builder.Property(x => x.CustomerId).HasColumnName("CustomerID").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(5);
            builder.Property(x => x.EmployeeId).HasColumnName("EmployeeID").IsOptional().HasColumnType("int");
            builder.Property(x => x.OrderDate).HasColumnName("OrderDate").IsOptional().HasColumnType("datetime");
            builder.Property(x => x.RequiredDate).HasColumnName("RequiredDate").IsOptional().HasColumnType("datetime");
            builder.Property(x => x.ShippedDate).HasColumnName("ShippedDate").IsOptional().HasColumnType("datetime");
            builder.Property(x => x.ShipVia).HasColumnName("ShipVia").IsOptional().HasColumnType("int");
            builder.Property(x => x.Freight).HasColumnName("Freight").IsOptional().HasColumnType("money").HasPrecision(19,4);
            builder.Property(x => x.ShipName).HasColumnName("ShipName").IsOptional().HasColumnType("nvarchar").HasMaxLength(40);
            builder.Property(x => x.ShipAddress).HasColumnName("ShipAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            builder.Property(x => x.ShipCity).HasColumnName("ShipCity").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.ShipRegion).HasColumnName("ShipRegion").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.ShipPostalCode).HasColumnName("ShipPostalCode").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            builder.Property(x => x.ShipCountry).HasColumnName("ShipCountry").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);

            // Foreign keys
            builder.HasOptional(a => a.Customer).WithMany(b => b.Orders).HasForeignKey(c => c.CustomerId); // FK_Orders_Customers
            builder.HasOptional(a => a.Employee).WithMany(b => b.Orders).HasForeignKey(c => c.EmployeeId); // FK_Orders_Employees
            builder.HasOptional(a => a.Shipper).WithMany(b => b.Orders).HasForeignKey(c => c.ShipVia); // FK_Orders_Shippers
        }
    }

    // Order Details
    public class OrderDetailConfiguration : EntityTypeConfiguration<OrderDetail>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<OrderDetail> builder, string schema)
        {
            builder.ToTable("Order Details", schema);
            builder.HasKey(x => new { x.OrderId, x.ProductId });

            builder.Property(x => x.OrderId).HasColumnName("OrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            builder.Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            builder.Property(x => x.UnitPrice).HasColumnName("UnitPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            builder.Property(x => x.Quantity).HasColumnName("Quantity").IsRequired().HasColumnType("smallint");
            builder.Property(x => x.Discount).HasColumnName("Discount").IsRequired().HasColumnType("real");

            // Foreign keys
            builder.HasRequired(a => a.Order).WithMany(b => b.OrderDetails).HasForeignKey(c => c.OrderId); // FK_Order_Details_Orders
            builder.HasRequired(a => a.Product).WithMany(b => b.OrderDetails).HasForeignKey(c => c.ProductId); // FK_Order_Details_Products
        }
    }

    // Order Details Extended
    public class OrderDetailsExtendedConfiguration : EntityTypeConfiguration<OrderDetailsExtended>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<OrderDetailsExtended> builder, string schema)
        {
            builder.ToTable("Order Details Extended", schema);
            builder.HasKey(x => new { x.OrderId, x.ProductId, x.ProductName, x.UnitPrice, x.Quantity, x.Discount });

            builder.Property(x => x.OrderId).HasColumnName("OrderID").IsRequired().HasColumnType("int");
            builder.Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int");
            builder.Property(x => x.ProductName).HasColumnName("ProductName").IsRequired().HasColumnType("nvarchar").HasMaxLength(40);
            builder.Property(x => x.UnitPrice).HasColumnName("UnitPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            builder.Property(x => x.Quantity).HasColumnName("Quantity").IsRequired().HasColumnType("smallint");
            builder.Property(x => x.Discount).HasColumnName("Discount").IsRequired().HasColumnType("real");
            builder.Property(x => x.ExtendedPrice).HasColumnName("ExtendedPrice").IsOptional().HasColumnType("money").HasPrecision(19,4);
        }
    }

    // Orders Qry
    public class OrdersQryConfiguration : EntityTypeConfiguration<OrdersQry>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<OrdersQry> builder, string schema)
        {
            builder.ToTable("Orders Qry", schema);
            builder.HasKey(x => new { x.OrderId, x.CompanyName });

            builder.Property(x => x.OrderId).HasColumnName("OrderID").IsRequired().HasColumnType("int");
            builder.Property(x => x.CustomerId).HasColumnName("CustomerID").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(5);
            builder.Property(x => x.EmployeeId).HasColumnName("EmployeeID").IsOptional().HasColumnType("int");
            builder.Property(x => x.OrderDate).HasColumnName("OrderDate").IsOptional().HasColumnType("datetime");
            builder.Property(x => x.RequiredDate).HasColumnName("RequiredDate").IsOptional().HasColumnType("datetime");
            builder.Property(x => x.ShippedDate).HasColumnName("ShippedDate").IsOptional().HasColumnType("datetime");
            builder.Property(x => x.ShipVia).HasColumnName("ShipVia").IsOptional().HasColumnType("int");
            builder.Property(x => x.Freight).HasColumnName("Freight").IsOptional().HasColumnType("money").HasPrecision(19,4);
            builder.Property(x => x.ShipName).HasColumnName("ShipName").IsOptional().HasColumnType("nvarchar").HasMaxLength(40);
            builder.Property(x => x.ShipAddress).HasColumnName("ShipAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            builder.Property(x => x.ShipCity).HasColumnName("ShipCity").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.ShipRegion).HasColumnName("ShipRegion").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.ShipPostalCode).HasColumnName("ShipPostalCode").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            builder.Property(x => x.ShipCountry).HasColumnName("ShipCountry").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.CompanyName).HasColumnName("CompanyName").IsRequired().HasColumnType("nvarchar").HasMaxLength(40);
            builder.Property(x => x.Address).HasColumnName("Address").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            builder.Property(x => x.City).HasColumnName("City").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.Region).HasColumnName("Region").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.PostalCode).HasColumnName("PostalCode").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            builder.Property(x => x.Country).HasColumnName("Country").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
        }
    }

    // Order Subtotals
    public class OrderSubtotalConfiguration : EntityTypeConfiguration<OrderSubtotal>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<OrderSubtotal> builder, string schema)
        {
            builder.ToTable("Order Subtotals", schema);
            builder.HasKey(x => x.OrderId);

            builder.Property(x => x.OrderId).HasColumnName("OrderID").IsRequired().HasColumnType("int");
            builder.Property(x => x.Subtotal).HasColumnName("Subtotal").IsOptional().HasColumnType("money").HasPrecision(19,4);
        }
    }

    // Products
    public class ProductConfiguration : EntityTypeConfiguration<Product>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<Product> builder, string schema)
        {
            builder.ToTable("Products", schema);
            builder.HasKey(x => x.ProductId);

            builder.Property(x => x.ProductId).HasColumnName("ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            builder.Property(x => x.ProductName).HasColumnName("ProductName").IsRequired().HasColumnType("nvarchar").HasMaxLength(40);
            builder.Property(x => x.SupplierId).HasColumnName("SupplierID").IsOptional().HasColumnType("int");
            builder.Property(x => x.CategoryId).HasColumnName("CategoryID").IsOptional().HasColumnType("int");
            builder.Property(x => x.QuantityPerUnit).HasColumnName("QuantityPerUnit").IsOptional().HasColumnType("nvarchar").HasMaxLength(20);
            builder.Property(x => x.UnitPrice).HasColumnName("UnitPrice").IsOptional().HasColumnType("money").HasPrecision(19,4);
            builder.Property(x => x.UnitsInStock).HasColumnName("UnitsInStock").IsOptional().HasColumnType("smallint");
            builder.Property(x => x.UnitsOnOrder).HasColumnName("UnitsOnOrder").IsOptional().HasColumnType("smallint");
            builder.Property(x => x.ReorderLevel).HasColumnName("ReorderLevel").IsOptional().HasColumnType("smallint");
            builder.Property(x => x.Discontinued).HasColumnName("Discontinued").IsRequired().HasColumnType("bit");

            // Foreign keys
            builder.HasOptional(a => a.Category).WithMany(b => b.Products).HasForeignKey(c => c.CategoryId); // FK_Products_Categories
            builder.HasOptional(a => a.Supplier).WithMany(b => b.Products).HasForeignKey(c => c.SupplierId); // FK_Products_Suppliers
        }
    }

    // Products Above Average Price
    public class ProductsAboveAveragePriceConfiguration : EntityTypeConfiguration<ProductsAboveAveragePrice>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<ProductsAboveAveragePrice> builder, string schema)
        {
            builder.ToTable("Products Above Average Price", schema);
            builder.HasKey(x => x.ProductName);

            builder.Property(x => x.ProductName).HasColumnName("ProductName").IsRequired().HasColumnType("nvarchar").HasMaxLength(40);
            builder.Property(x => x.UnitPrice).HasColumnName("UnitPrice").IsOptional().HasColumnType("money").HasPrecision(19,4);
        }
    }

    // Product Sales for 1997
    public class ProductSalesFor1997Configuration : EntityTypeConfiguration<ProductSalesFor1997>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<ProductSalesFor1997> builder, string schema)
        {
            builder.ToTable("Product Sales for 1997", schema);
            builder.HasKey(x => new { x.CategoryName, x.ProductName });

            builder.Property(x => x.CategoryName).HasColumnName("CategoryName").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.ProductName).HasColumnName("ProductName").IsRequired().HasColumnType("nvarchar").HasMaxLength(40);
            builder.Property(x => x.ProductSales).HasColumnName("ProductSales").IsOptional().HasColumnType("money").HasPrecision(19,4);
        }
    }

    // Products by Category
    public class ProductsByCategoryConfiguration : EntityTypeConfiguration<ProductsByCategory>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<ProductsByCategory> builder, string schema)
        {
            builder.ToTable("Products by Category", schema);
            builder.HasKey(x => new { x.CategoryName, x.ProductName, x.Discontinued });

            builder.Property(x => x.CategoryName).HasColumnName("CategoryName").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.ProductName).HasColumnName("ProductName").IsRequired().HasColumnType("nvarchar").HasMaxLength(40);
            builder.Property(x => x.QuantityPerUnit).HasColumnName("QuantityPerUnit").IsOptional().HasColumnType("nvarchar").HasMaxLength(20);
            builder.Property(x => x.UnitsInStock).HasColumnName("UnitsInStock").IsOptional().HasColumnType("smallint");
            builder.Property(x => x.Discontinued).HasColumnName("Discontinued").IsRequired().HasColumnType("bit");
        }
    }

    // Region
    public class RegionConfiguration : EntityTypeConfiguration<Region>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<Region> builder, string schema)
        {
            builder.ToTable("Region", schema);
            builder.HasKey(x => x.RegionId);

            builder.Property(x => x.RegionId).HasColumnName("RegionID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            builder.Property(x => x.RegionDescription).HasColumnName("RegionDescription").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
        }
    }

    // Sales by Category
    public class SalesByCategoryConfiguration : EntityTypeConfiguration<SalesByCategory>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<SalesByCategory> builder, string schema)
        {
            builder.ToTable("Sales by Category", schema);
            builder.HasKey(x => new { x.CategoryId, x.CategoryName, x.ProductName });

            builder.Property(x => x.CategoryId).HasColumnName("CategoryID").IsRequired().HasColumnType("int");
            builder.Property(x => x.CategoryName).HasColumnName("CategoryName").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.ProductName).HasColumnName("ProductName").IsRequired().HasColumnType("nvarchar").HasMaxLength(40);
            builder.Property(x => x.ProductSales).HasColumnName("ProductSales").IsOptional().HasColumnType("money").HasPrecision(19,4);
        }
    }

    // Sales Totals by Amount
    public class SalesTotalsByAmountConfiguration : EntityTypeConfiguration<SalesTotalsByAmount>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<SalesTotalsByAmount> builder, string schema)
        {
            builder.ToTable("Sales Totals by Amount", schema);
            builder.HasKey(x => new { x.OrderId, x.CompanyName });

            builder.Property(x => x.SaleAmount).HasColumnName("SaleAmount").IsOptional().HasColumnType("money").HasPrecision(19,4);
            builder.Property(x => x.OrderId).HasColumnName("OrderID").IsRequired().HasColumnType("int");
            builder.Property(x => x.CompanyName).HasColumnName("CompanyName").IsRequired().HasColumnType("nvarchar").HasMaxLength(40);
            builder.Property(x => x.ShippedDate).HasColumnName("ShippedDate").IsOptional().HasColumnType("datetime");
        }
    }

    // Shippers
    public class ShipperConfiguration : EntityTypeConfiguration<Shipper>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<Shipper> builder, string schema)
        {
            builder.ToTable("Shippers", schema);
            builder.HasKey(x => x.ShipperId);

            builder.Property(x => x.ShipperId).HasColumnName("ShipperID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            builder.Property(x => x.CompanyName).HasColumnName("CompanyName").IsRequired().HasColumnType("nvarchar").HasMaxLength(40);
            builder.Property(x => x.Phone).HasColumnName("Phone").IsOptional().HasColumnType("nvarchar").HasMaxLength(24);
        }
    }

    // Summary of Sales by Quarter
    public class SummaryOfSalesByQuarterConfiguration : EntityTypeConfiguration<SummaryOfSalesByQuarter>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<SummaryOfSalesByQuarter> builder, string schema)
        {
            builder.ToTable("Summary of Sales by Quarter", schema);
            builder.HasKey(x => x.OrderId);

            builder.Property(x => x.ShippedDate).HasColumnName("ShippedDate").IsOptional().HasColumnType("datetime");
            builder.Property(x => x.OrderId).HasColumnName("OrderID").IsRequired().HasColumnType("int");
            builder.Property(x => x.Subtotal).HasColumnName("Subtotal").IsOptional().HasColumnType("money").HasPrecision(19,4);
        }
    }

    // Summary of Sales by Year
    public class SummaryOfSalesByYearConfiguration : EntityTypeConfiguration<SummaryOfSalesByYear>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<SummaryOfSalesByYear> builder, string schema)
        {
            builder.ToTable("Summary of Sales by Year", schema);
            builder.HasKey(x => x.OrderId);

            builder.Property(x => x.ShippedDate).HasColumnName("ShippedDate").IsOptional().HasColumnType("datetime");
            builder.Property(x => x.OrderId).HasColumnName("OrderID").IsRequired().HasColumnType("int");
            builder.Property(x => x.Subtotal).HasColumnName("Subtotal").IsOptional().HasColumnType("money").HasPrecision(19,4);
        }
    }

    // Suppliers
    public class SupplierConfiguration : EntityTypeConfiguration<Supplier>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<Supplier> builder, string schema)
        {
            builder.ToTable("Suppliers", schema);
            builder.HasKey(x => x.SupplierId);

            builder.Property(x => x.SupplierId).HasColumnName("SupplierID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            builder.Property(x => x.CompanyName).HasColumnName("CompanyName").IsRequired().HasColumnType("nvarchar").HasMaxLength(40);
            builder.Property(x => x.ContactName).HasColumnName("ContactName").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            builder.Property(x => x.ContactTitle).HasColumnName("ContactTitle").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            builder.Property(x => x.Address).HasColumnName("Address").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            builder.Property(x => x.City).HasColumnName("City").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.Region).HasColumnName("Region").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.PostalCode).HasColumnName("PostalCode").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            builder.Property(x => x.Country).HasColumnName("Country").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            builder.Property(x => x.Phone).HasColumnName("Phone").IsOptional().HasColumnType("nvarchar").HasMaxLength(24);
            builder.Property(x => x.Fax).HasColumnName("Fax").IsOptional().HasColumnType("nvarchar").HasMaxLength(24);
            builder.Property(x => x.HomePage).HasColumnName("HomePage").IsOptional().HasColumnType("ntext").IsMaxLength();
        }
    }

    // Territories
    public class TerritoryConfiguration : EntityTypeConfiguration<Territory>
    {
 
        public void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<Territory> builder, string schema)
        {
            builder.ToTable("Territories", schema);
            builder.HasKey(x => x.TerritoryId);

            builder.Property(x => x.TerritoryId).HasColumnName("TerritoryID").IsRequired().HasColumnType("nvarchar").HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            builder.Property(x => x.TerritoryDescription).HasColumnName("TerritoryDescription").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(50);
            builder.Property(x => x.RegionId).HasColumnName("RegionID").IsRequired().HasColumnType("int");

            // Foreign keys
            builder.HasRequired(a => a.Region).WithMany(b => b.Territories).HasForeignKey(c => c.RegionId); // FK_Territories_Region
        }
    }


    // ************************************************************************
    // Stored procedure return models

    public class CustOrderHistReturnModel
    {
        public System.String ProductName { get; set; }
        public System.Int32? Total { get; set; }
    }

    public class CustOrdersDetailReturnModel
    {
        public System.String ProductName { get; set; }
        public System.Decimal? UnitPrice { get; set; }
        public System.Int16 Quantity { get; set; }
        public System.Int32? Discount { get; set; }
        public System.Decimal? ExtendedPrice { get; set; }
    }

    public class CustOrdersOrdersReturnModel
    {
        public System.Int32 OrderID { get; set; }
        public System.DateTime? OrderDate { get; set; }
        public System.DateTime? RequiredDate { get; set; }
        public System.DateTime? ShippedDate { get; set; }
    }

    public class EmployeeSalesByCountryReturnModel
    {
        public System.String Country { get; set; }
        public System.String LastName { get; set; }
        public System.String FirstName { get; set; }
        public System.DateTime? ShippedDate { get; set; }
        public System.Int32 OrderID { get; set; }
        public System.Decimal? SaleAmount { get; set; }
    }

    public class SalesByYearReturnModel
    {
        public System.DateTime? ShippedDate { get; set; }
        public System.Int32 OrderID { get; set; }
        public System.Decimal? Subtotal { get; set; }
        public System.String Year { get; set; }
    }

    public class SalesByCategoryReturnModel
    {
        public System.String ProductName { get; set; }
        public System.Decimal? TotalPurchase { get; set; }
    }

    public class TenMostExpensiveProductsReturnModel
    {
        public System.String TenMostExpensiveProducts { get; set; }
        public System.Decimal? UnitPrice { get; set; }
    }


    // ************************************************************************
    // Helper Classes

    internal interface EntityTypeConfiguration<TEntity> where TEntity : class
    {
        void Config(Microsoft.Data.Entity.Metadata.Builders.EntityTypeBuilder<TEntity> typeBuilder, string schema);
    }

    internal static class EF7Helper
    {//see https://github.com/aspnet/EntityFramework/wiki/Entity-Framework-Design-Meeting-Notes-June-5,-2014#decision-property-facet-apis
        public static void Add<TEntity>(this ModelBuilder builder, EntityTypeConfiguration<TEntity> cfg, string schema = "dbo")
            where TEntity : class
        {
            builder.Entity<TEntity>(etb => cfg.Config(etb, schema));
        }

        public static PropertyBuilder<TProperty> IsOptional<TProperty>(this PropertyBuilder<TProperty> builder)
        {
            return builder.IsRequired(false);
        }

        public static PropertyBuilder<TProperty> IsUnicode<TProperty>(this PropertyBuilder<TProperty> builder, bool unicode)
        {
            return builder;
        }

        public static PropertyBuilder<TProperty> IsFixedLength<TProperty>(this PropertyBuilder<TProperty> builder)
        {
            return builder;
        }

        public static PropertyBuilder<TProperty> IsMaxLength<TProperty>(this PropertyBuilder<TProperty> builder)
        {
            return builder;
        }

        public static ReferenceNavigationBuilder<TEntity, TRelatedEntity> HasRequired<TEntity, TRelatedEntity>(
            this EntityTypeBuilder<TEntity> builder, Expression<Func<TEntity, TRelatedEntity>> reference = null)
            where TEntity : class
            where TRelatedEntity : class
        {
            return builder.HasOne(reference);
        }

        public static ReferenceNavigationBuilder<TEntity, TRelatedEntity> HasOptional<TEntity, TRelatedEntity>(
            this EntityTypeBuilder<TEntity> builder, Expression<Func<TEntity, TRelatedEntity>> reference = null)
            where TEntity : class
            where TRelatedEntity : class
        {
            return builder.HasOne(reference);
        }

        public static ReferenceReferenceBuilder<TEntity, TRelatedEntity> WithOptional<TEntity, TRelatedEntity>(
            this ReferenceNavigationBuilder<TEntity, TRelatedEntity> builder, Expression<Func<TRelatedEntity, TEntity>> reference = null)
            where TEntity : class
            where TRelatedEntity : class
        {
            return builder.WithOne(reference);
        }

#if false
        public static CollectionNavigationBuilder<TEntity, TRelatedEntity> WithMany<TEntity, TRelatedEntity>(
            this CollectionNavigationBuilder<TEntity, TRelatedEntity> builder, Expression<Func<TRelatedEntity, System.Collections.Generic.IEnumerable<TEntity>>> reference = null)
            where TEntity : class
            where TRelatedEntity : class
        {
            //var innerBuilder = ((Microsoft.Data.Entity.Infrastructure.IInfrastructure<Microsoft.Data.Entity.Metadata.Internal.InternalRelationshipBuilder>)builder).Instance;

            //return innerBuilder.PrincipalEntityType(builder.RelatedEntityType, Microsoft.Data.Entity.Metadata.Internal.ConfigurationSource.Explicit)
            //    .IsUnique(false, Microsoft.Data.Entity.Metadata.Internal.ConfigurationSource.Explicit)
            //    .PrincipalToDependent(collection, Microsoft.Data.Entity.Metadata.Internal.ConfigurationSource.Explicit);
            //TODO: link to another table
            return builder;
        }
#endif

        public static PropertyBuilder<TProperty> HasPrecision<TProperty>(this PropertyBuilder<TProperty> builder, byte precision, byte scale)
        {
            //for decimal/Nullable<decimal>
            //TODO: (precision, scale)
            return builder;
        }

        public static PropertyBuilder<TProperty> HasDatabaseGeneratedOption<TProperty>(
            this PropertyBuilder<TProperty> builder, DatabaseGeneratedOption option)
        {
            switch (option)
            {
                case DatabaseGeneratedOption.None:
                    return builder.ValueGeneratedNever();
                case DatabaseGeneratedOption.Computed:
                    return builder.ValueGeneratedOnAddOrUpdate();
                case DatabaseGeneratedOption.Identity:
                    return builder.ValueGeneratedOnAdd();
                default:
                    throw new ArgumentException("option");
            }
        }
    }
}
// </auto-generated>

